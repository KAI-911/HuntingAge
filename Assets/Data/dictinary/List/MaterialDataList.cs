using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
[Serializable]
public class MaterialDataList : MonoBehaviour
{
    public MaterialSaveData _materialSaveData;

    [ContextMenu("PrintDictionary")]
    public void PrintDictionary()
    {
        foreach (var item in _materialSaveData.dictionary)
        {
            Debug.Log("Key: " + item.Key + " Value: " + item.Value);
        }
    }

    /// <summary>
    /// ボックスからポーチに指定数のアイテムを送る
    /// ボックスに指定数ない場合はボックスにあるだけ渡す
    /// ポーチに受け取る容量が足りない場合は受け取れるだけ渡す
    /// </summary>
    /// <param name="ID">移動させるアイテムのID</param>
    /// <param name="move">ボックスからいくつ移動させるか</param>
    /// <param name="uinum">ポーチに移動させるアイテムがない場合に使用するUIの場所</param>
    public void BoxToPoach(string ID, int move, int uinum)
    {
        if (!_materialSaveData.dictionary.ContainsKey(ID)) return;
        var data = _materialSaveData.dictionary[ID];

        int eraseNumber = move;
        //ボックスにアイテムが足りない
        if (move > data.BoxHoldNumber) eraseNumber = data.BoxHoldNumber;
        //ポーチに受け取る容量がない
        if (move > data.PoachStackNumber - data.PoachHoldNumber) eraseNumber = data.PoachStackNumber - data.PoachHoldNumber;

        //UIの位置を設定
        if (data.PoachHoldNumber <= 0) data.PoachUINumber = uinum;

        data.BoxHoldNumber -= eraseNumber;
        data.PoachHoldNumber += eraseNumber;
        _materialSaveData.dictionary[ID] = data;
    }

    /// <summary>
    /// ポーチからボックスに指定数のアイテムを送る
    /// ポーチに指定数ない場合はポーチにあるだけ渡す
    /// ボックスに受け取る容量が足りない場合は受け取れるだけ渡す
    /// </summary>
    /// <param name="ID">移動させるアイテムのID</param>
    /// <param name="move">ボックスからいくつ移動させるか</param>
    /// <param name="uinum">ボックスに移動させるアイテムがない場合に使用するUIの場所</param>
    public void PoachToBox(string ID, int move, int uinum)
    {
        if (!_materialSaveData.dictionary.ContainsKey(ID)) return;
        var data = _materialSaveData.dictionary[ID];

        int eraseNumber = move;
        //ポーチにアイテムが足りない
        if (move > data.PoachHoldNumber) eraseNumber = data.PoachHoldNumber;
        //ボックスに受け取る容量がない
        if (move > data.BoxStackNumber - data.BoxHoldNumber) eraseNumber = data.BoxStackNumber - data.BoxHoldNumber;

        //UIの位置を設定
        if (data.BoxHoldNumber <= 0) data.BoxUINumber = uinum;

        data.PoachHoldNumber -= eraseNumber;
        data.BoxHoldNumber += eraseNumber;
        _materialSaveData.dictionary[ID] = data;
    }

    /// <summary>
    /// ポーチに指定数のアイテムを送る
    /// </summary>
    /// <param name="ID">移動させるアイテムのID</param>
    /// <param name="move">いくつ移動させるか</param>
    /// <param name="uinum">ポーチに移動させるアイテムがない場合に使用するUIの場所</param>
    /// <returns>
    /// 基本的に正の値を返す
    /// -1 エラー:キーが見つからなかった
    /// </returns>
    public int GetToPoach(string ID, int move, int uinum)
    {
        if (!_materialSaveData.dictionary.ContainsKey(ID)) return -1;
        var data = _materialSaveData.dictionary[ID];

        int addNumber = move;
        //ポーチに受け取る容量がない
        if (move > data.PoachStackNumber - data.PoachHoldNumber) addNumber = data.PoachStackNumber - data.PoachHoldNumber;

        //UIの位置を設定
        if (data.PoachHoldNumber <= 0) data.PoachUINumber = uinum;

        data.PoachHoldNumber += addNumber;
        _materialSaveData.dictionary[ID] = data;
        return addNumber;
    }

    /// <summary>
    /// ボックスに指定数のアイテムを送る 
    /// 基本的に正の値を返す
    /// -1 エラー:キーが見つからなかった
    /// </summary>
    /// <param name="ID">移動させるアイテムのID</param>
    /// <param name="move">いくつ移動させるか</param>
    /// <param name="uinum">ボックスに移動させるアイテムがない場合に使用するUIの場所</param>
    /// <returns></returns>
    public int GetToBox(string ID, int move, int uinum)
    {
        if (!_materialSaveData.dictionary.ContainsKey(ID)) return -1;
        var data = _materialSaveData.dictionary[ID];

        int addNumber = move;
        //ポーチに受け取る容量がない
        if (move > data.BoxStackNumber - data.BoxHoldNumber) addNumber = data.BoxStackNumber - data.BoxHoldNumber;

        //UIの位置を設定
        if (data.BoxHoldNumber <= 0) data.BoxUINumber = uinum;

        data.BoxHoldNumber += addNumber;
        _materialSaveData.dictionary[ID] = data;
        return addNumber;
    }

}

[System.Serializable]
public struct MaterialData
{
    /// <summary>
    /// IDはItem000から連番
    /// IDはMaterial000から連番
    /// </summary>
    public string ID;

    /// <summary>
    /// 表示される名前
    /// </summary>
    public string Name;

    /// <summary>
    /// アイコンのパス
    /// </summary>
    public string IconName;

    /// <summary>
    /// アイテムボックスで一枠で保存できる最大量
    /// </summary>
    public int BoxStackNumber;

    /// <summary>
    /// アイテムボックスでどの枠に保存されているか
    /// </summary>
    public int BoxUINumber;

    /// <summary>
    /// アイテムボックスでどれだけ持っているか
    /// </summary>
    public int BoxHoldNumber;

    /// <summary>
    /// アイテムポーチで一枠で保存できる最大量
    /// </summary>
    public int PoachStackNumber;

    /// <summary>
    /// アイテムポーチでどの枠に保存されているか
    /// </summary>
    public int PoachUINumber;

    /// <summary>
    /// アイテムポーチでどれだけ持っているか
    /// </summary>
    public int PoachHoldNumber;
}
